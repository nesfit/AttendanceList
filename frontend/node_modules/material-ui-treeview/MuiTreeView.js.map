{"version":3,"sources":["webpack:///webpack/universalModuleDefinition","webpack:///webpack/bootstrap 3e731e99440dc194fcc4","webpack:///external \"react\"","webpack:///./src/components/MuiTreeView/index.jsx","webpack:///external \"prop-types\""],"names":["pickClassName","tree","value","href","id","Object","nodes","MuiTreeView","searchTerm","serializer","JSON","node","parent","depth","haltSearch","isLeaf","textIndent","shouldHaltSearch","softSearch","component","to","classes","expanded","panelExpanded","root","expandIcon","panelSummary","subtree","graph","onLeafClick","expansionPanelSummaryProps","expansionPanelDetailsProps","listItemProps","styles","panel","width","paddingRight","paddingLeft","padding","marginLeft","theme","unit","panelDetails","display","margin","opacity","childPanel","text","overflow","textOverflow","whiteSpace","maxWidth"],"mappings":"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","file":"MuiTreeView.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory();\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"MuiTreeView\", [], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"MuiTreeView\"] = factory();\n\telse\n\t\troot[\"MuiTreeView\"] = factory();\n})(typeof self !== 'undefined' ? self : this, function() {\nreturn \n\n\n// WEBPACK FOOTER //\n// webpack/universalModuleDefinition"," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, {\n \t\t\t\tconfigurable: false,\n \t\t\t\tenumerable: true,\n \t\t\t\tget: getter\n \t\t\t});\n \t\t}\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"./\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = 16);\n\n\n\n// WEBPACK FOOTER //\n// webpack/bootstrap 3e731e99440dc194fcc4","module.exports = require(\"react\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"react\"\n// module id = 0\n// module chunks = 0 1","import { Component } from 'react';\nimport {\n  arrayOf,\n  bool,\n  shape,\n  number,\n  string,\n  func,\n  oneOfType,\n  object,\n} from 'prop-types';\nimport classNames from 'classnames';\nimport { Link } from 'react-router-dom';\nimport { prop } from 'ramda';\nimport memoize from 'fast-memoize';\nimport { withStyles } from '@material-ui/core/styles';\nimport ListItem from '@material-ui/core/ListItem';\nimport ExpansionPanel from '@material-ui/core/ExpansionPanel';\nimport ExpansionPanelDetails from '@material-ui/core/ExpansionPanelDetails';\nimport ExpansionPanelSummary from '@material-ui/core/ExpansionPanelSummary';\nimport KeyboardArrowDown from '@material-ui/icons/KeyboardArrowDown';\n\nconst pickClassName = prop('className');\n/** Prop-type for a recursive data structure */\nconst tree = {\n  // The node value.\n  value: string.isRequired,\n  /**\n   * A string representation of the location to link to.\n   * Only use this property on a leaf node.\n   * This value will be fed directly to the\n   * [Link](https://github.com/ReactTraining/react-router/blob/master/packages/react-router-dom/docs/api/Link.md)\n   * component of `react-router-dom`.\n   * */\n  href: string,\n  // Optional node ID. Useful for when the node value is not unique.\n  id: oneOfType([string, number]),\n};\n\nObject.assign(tree, {\n  nodes: arrayOf(oneOfType([shape(tree), string])),\n});\n\nconst styles = theme => ({\n  panel: {\n    width: '100%',\n    paddingRight: 0,\n    paddingLeft: 0,\n  },\n  panelSummary: {\n    padding: 0,\n    marginLeft: theme.spacing.unit,\n  },\n  panelDetails: {\n    padding: 0,\n    display: 'block',\n  },\n  panelExpanded: {\n    margin: 0,\n    '&:before': {\n      opacity: 0,\n    },\n  },\n  childPanel: {\n    '&:before': {\n      opacity: 0,\n    },\n  },\n  text: {\n    overflow: 'hidden',\n    textOverflow: 'ellipsis',\n    whiteSpace: 'noWrap',\n    maxWidth: '75vw',\n  },\n  expandIcon: {},\n});\n\n/**\n * Render a tree view.\n */\nclass MuiTreeView extends Component {\n  static propTypes = {\n    /** The data to render as a tree view */\n    tree: arrayOf(shape(tree)).isRequired,\n    /** Callback function fired when a tree leaf is clicked. */\n    onLeafClick: func,\n    /** A search term to refine the tree */\n    searchTerm: string,\n    /**\n     * Given a `searchTerm`, a subtree will be shown if any parent node\n     * higher up in the tree matches the search term. Defaults to false.\n     * */\n    softSearch: bool,\n    /** Properties applied to the ExpansionPanelSummary element. */\n    expansionPanelSummaryProps: object,\n    /** Properties applied to the ExpansionPanelDetails element. */\n    expansionPanelDetailsProps: object,\n    /** Properties applied to the ListItem element. */\n    listItemProps: object,\n  };\n\n  static defaultProps = {\n    searchTerm: null,\n    softSearch: false,\n    onLeafClick: null,\n    expansionPanelSummaryProps: null,\n    expansionPanelDetailsProps: null,\n    listItemProps: null,\n  };\n\n  createFilteredTree = memoize(\n    (tree, searchTerm) => (searchTerm ? this.filter(tree) : tree),\n    {\n      serializer: ([tree, searchTerm, softSearch]) =>\n        `${JSON.stringify(tree)}-${searchTerm}-${softSearch}`,\n    }\n  );\n\n  handleLeafClick = leaf => {\n    if (this.props.onLeafClick) {\n      this.props.onLeafClick(leaf);\n    }\n  };\n\n  renderNode = ({ node, parent, depth = 0, haltSearch }) => {\n    const {\n      theme: {\n        spacing: { unit },\n      },\n      classes,\n      searchTerm,\n      softSearch,\n      onLeafClick: _,\n      expansionPanelSummaryProps,\n      expansionPanelDetailsProps,\n      listItemProps,\n      ...props\n    } = this.props;\n    const value = this.getNodeValue(node);\n    const id = this.getNodeId(node);\n    const isLeaf = this.isLeaf(node);\n    const href = isLeaf ? this.getNodeHref(node) : null;\n    const textIndent = isLeaf\n      ? depth * unit + unit + (parent ? unit : 0)\n      : unit * depth + unit;\n    const shouldHaltSearch =\n      softSearch && searchTerm ? value.includes(searchTerm) : false;\n\n    if (!haltSearch && isLeaf && searchTerm && !value.includes(searchTerm)) {\n      return null;\n    }\n\n    if (isLeaf) {\n      return (\n        <ListItem\n          disableGutters\n          style={{ textIndent }}\n          key={typeof id !== 'undefined' ? id : value}\n          id={value}\n          value={value}\n          onClick={() => this.handleLeafClick({ value, parent, id })}\n          button\n          {...(href\n            ? {\n                component: Link,\n                to: href,\n              }\n            : null)}\n          {...listItemProps}>\n          <div className={classes.text}>{value}</div>\n        </ListItem>\n      );\n    }\n\n    const expansionPanelClasses = {\n      expanded: classes.panelExpanded,\n      ...(parent ? { root: classes.childPanel } : null),\n    };\n\n    return (\n      <ExpansionPanel\n        classes={expansionPanelClasses}\n        style={{ textIndent }}\n        key={typeof node.id !== 'undefined' ? node.id : node.value}\n        elevation={0}\n        {...props}\n        className={classNames(classes.panel, pickClassName(props))}>\n        <ExpansionPanelSummary\n          classes={{\n            expandIcon: classes.expandIcon,\n            root: classes.panelSummary,\n          }}\n          {...expansionPanelSummaryProps}\n          className={classNames(pickClassName(expansionPanelSummaryProps))}\n          expandIcon={<KeyboardArrowDown />}>\n          <div className={classes.text}>{node.value}</div>\n        </ExpansionPanelSummary>\n        <ExpansionPanelDetails\n          {...expansionPanelDetailsProps}\n          classes={{ root: classes.panelDetails }}\n          className={classNames(pickClassName(expansionPanelDetailsProps))}>\n          {node.nodes.map(l =>\n            this.renderNode({\n              node: l,\n              parent: node,\n              depth: depth + 1,\n              haltSearch: shouldHaltSearch,\n            })\n          )}\n        </ExpansionPanelDetails>\n      </ExpansionPanel>\n    );\n  };\n\n  isLeaf(node) {\n    return typeof node === 'string' || !node.nodes || !node.nodes.length;\n  }\n\n  getNodeValue(node) {\n    return typeof node === 'string' ? node : node.value;\n  }\n\n  getNodeId(node) {\n    if (typeof node === 'object') {\n      return node.id;\n    }\n  }\n\n  getNodeHref(node) {\n    if (typeof node === 'object') {\n      return node.href;\n    }\n  }\n\n  filter(tree) {\n    const { searchTerm } = this.props;\n\n    return tree.filter(node => {\n      const value = this.getNodeValue(node);\n      const isLeaf = this.isLeaf(node);\n\n      if (value.includes(searchTerm)) {\n        return true;\n      }\n\n      if (isLeaf) {\n        return false;\n      }\n\n      const subtree = this.filter(node.nodes);\n\n      return Boolean(subtree.length);\n    });\n  }\n\n  render() {\n    const { tree, searchTerm, softSearch } = this.props;\n    const graph = this.createFilteredTree(tree, searchTerm, softSearch);\n\n    return graph.map(node =>\n      this.renderNode({ node, parent: null, haltSearch: false })\n    );\n  }\n}\n\nexport default withStyles(styles, { withTheme: true })(MuiTreeView);\n\n\n\n// WEBPACK FOOTER //\n// ./src/components/MuiTreeView/index.jsx","module.exports = require(\"prop-types\");\n\n\n//////////////////\n// WEBPACK FOOTER\n// external \"prop-types\"\n// module id = 18\n// module chunks = 1"],"sourceRoot":""}